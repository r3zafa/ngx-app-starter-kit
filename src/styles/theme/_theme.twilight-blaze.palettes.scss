
@use "sass:map";

$palettes: (
        primary: (
                0: #000000,
                10: #001a3a,
                20: #00306b,
                25: #003b85,
                30: #00479f,
                35: #0052b8,
                40: #0060d1,
                50: #1a7cff,
                60: #4c9cff,
                70: #7cbaff,
                80: #a6d4ff,
                90: #d0eaff,
                95: #eaf6ff,
                98: #f5fbff,
                99: #fbfdff,
                100: #ffffff
        ),
        secondary: (
                0: #000000,
                5: #001010,
                10: #001a1a,
                15: #002525,
                20: #003333,
                22: #003a3a,
                25: #004040,
                28: #004c4c,
                30: #005555,
                35: #006666,
                38: #007070,
                40: #007777,
                45: #008888,
                50: #009999,
                55: #00a6a6,
                60: #00b3b3,
                65: #00c0c0,
                70: #00cccc,
                75: #00d6d6,
                80: #00e6e6,
                85: #4aeeee,
                90: #a3f0f0,
                92: #c0f5f5,
                94: #d3f7f7,
                95: #d9f9f9,
                96: #e0fcfc,
                97: #e8fdfd,
                98: #f0fdfd,
                99: #f9fffe,
                100: #ffffff
        ),
        tertiary: (
                0: #000000,
                10: #002020,
                20: #003d3d,
                25: #004c4c,
                30: #005c5c,
                35: #006d6d,
                40: #007e7e,
                50: #00a3a3,
                60: #00c2c2,
                70: #00e0e0,
                80: #5ffbfb,
                90: #b3ffff,
                95: #e0ffff,
                98: #f2fffe,
                99: #fbfffe,
                100: #ffffff
        ),
        neutral: (
                0: #000000,
                4: #0c0e13,
                6: #111318,
                10: #191c21,
                12: #1d2025,
                17: #282a2f,
                20: #2e3036,
                22: #32353a,
                24: #37393f,
                25: #393b41,
                30: #45474c,
                35: #505258,
                40: #5c5e64,
                50: #75777d,
                60: #8f9097,
                70: #aaabb1,
                80: #c5c6cd,
                87: #d9d9e0,
                90: #e1e2e9,
                92: #e7e8ef,
                94: #ededf4,
                95: #f0f0f7,
                96: #f3f3fa,
                98: #f9f9ff,
                99: #fdfbff,
                100: #ffffff
        ),
        neutral-variant: (
                0: #000000,
                10: #171c25,
                20: #2c313a,
                25: #373c45,
                30: #424751,
                35: #4e525d,
                40: #5a5e69,
                50: #727782,
                60: #8c919c,
                70: #a7abb7,
                80: #c2c6d3,
                90: #dee2ef,
                95: #edf0fd,
                98: #f9f9ff,
                99: #fdfbff,
                100: #ffffff
        ),
        error: (
                0: #000000,
                10: #410002,
                20: #690005,
                25: #7e0007,
                30: #93000a,
                35: #a80710,
                40: #ba1a1a,
                50: #de3730,
                60: #ff5449,
                70: #ff897d,
                80: #ffb4ab,
                90: #ffdad6,
                95: #ffedea,
                98: #fff8f7,
                99: #fffbff,
                100: #ffffff
        )
);

/// Retrieves a color palette by name
/// @param {String} $name - Name of the palette (e.g., 'primary', 'secondary')
/// @return {Map} The requested color palette
/// @throws Error if palette doesn't exist
@function palette($name) {
  @if not map.has-key($palettes, $name) {
    @error 'Palette `#{$name}` not found. Available palettes: #{map.keys($palettes)}';
  }

  @return map.get($palettes, $name);
}

/// Gets a specific color from a palette
/// @param {String} $palette-name - Name of the palette
/// @param {Number} $tone - The tone/key to retrieve (e.g., 10, 20, 30)
/// @return {Color} The requested color
/// @throws Error if palette or tone doesn't exist
@function color($palette-name, $tone) {
  $palette: palette($palette-name);

  @if not map.has-key($palette, $tone) {
    @error 'Tone `#{$tone}` not found in palette `#{$palette-name}`. Available tones: #{map.keys($palette)}';
  }

  @return map.get($palette, $tone);
}

/// Merges additional values into an existing palette
/// @param {String} $palette-name - Name of the base palette
/// @param {Map} $additional-colors - Map of additional colors to merge
/// @return {Map} The merged palette
@function extend($palette-name, $additional-colors) {
  $palette: palette($palette-name);
  @return map.merge($palette, $additional-colors);
}
